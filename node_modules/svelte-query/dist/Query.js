"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const svelte_1 = require("svelte");
const Cache_1 = require("./Cache");
const Store_1 = require("./Store");
const Context_1 = require("./Context");
const Types_1 = require("./Types");
let lastKey;
function query(...args) {
    let key;
    let fn;
    let config;
    if (args.length >= 1) {
        key = args[0];
    }
    if (args.length > 2) {
        fn = args[1];
        config = args[2];
    }
    else {
        if (typeof args[1] === "function") {
            fn = args[1];
        }
        else if (typeof args[1] === "object") {
            config = args[1];
        }
    }
    config = Object.assign({}, Types_1.defaultConfig, Context_1.getContext(), config);
    if (!key) {
        Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data: undefined })));
        return { subscribe: Store_1.subscribe };
    }
    let interval;
    svelte_1.beforeUpdate(() => __awaiter(this, void 0, void 0, function* () {
        if (key instanceof Promise) {
            try {
                Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data: undefined })));
                const keyVal = yield key;
                if (typeof keyVal === "string") {
                    key = keyVal;
                }
            }
            catch (e) {
                Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data: undefined })));
                return;
            }
        }
        if (key !== lastKey) {
            Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: true })));
            if (typeof key === "function") {
                key = key();
            }
            if (typeof fn === "undefined") {
                fn = config.fetcher;
            }
            lastKey = key;
            if (Cache_1.cache.has(key)) {
                Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data: Cache_1.cache.get(key) })));
            }
            try {
                const data = yield (fn === null || fn === void 0 ? void 0 : fn(key));
                Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data })));
                Cache_1.cache.set(key, data);
            }
            catch (error) {
                Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, error })));
            }
            if (config === null || config === void 0 ? void 0 : config.refreshInterval) {
                interval = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const data = yield (fn === null || fn === void 0 ? void 0 : fn(key));
                        Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, data })));
                        Cache_1.cache.set(key, data);
                    }
                    catch (error) {
                        Store_1.update(state => (Object.assign(Object.assign({}, state), { loading: false, error })));
                    }
                }), config === null || config === void 0 ? void 0 : config.refreshInterval);
            }
        }
    }));
    svelte_1.onDestroy(() => clearInterval(interval));
    return { subscribe: Store_1.subscribe };
}
exports.query = query;
